loops;
repeat until
simple 
while


simple---
DELIMITER --
CREATE PROCEDURE SIMPLE_LOOP(NUM INT)
BEGIN
	SET @COUNTER =0;
	MYlOOP : LOOP
	SELECT @COUNTER;
	SET @COUNTER = @COUNTER + 1;
		IF @COUNTER>NUM THEN 
	LEAVE MYLOOP;
		END IF;
	END LOOP;
END;--

DELIMITER ;
CALL SIMPLE_LOOP(10);


---------------------------
DELIMITER --
CREATE PROCEDURE NAME_LOOP(NUM INT)
BEGIN
	SET @COUNTER = 0;
	MYlOOP : LOOP
	SELECT "NARA YANA NEYAN" AS NAME;
	SET @COUNTER = @COUNTER + 1;
		IF @COUNTER>NUM THEN 
	LEAVE MYLOOP;
		END IF;
	END LOOP;
END;--

DELIMITER ;
CALL NAME_LOOP(10);

-----------------------

delimiter ==
create procedure WHILE_LOOP()
BEGIN
	DECLARE COUNTER INT DEFAULT 0;
	WHILE (COUNTER <=10)
 	 do
	  select COUNTER;
	  SET COUNTER = COUNTER +2;
	  END WHILE;
END ;
==

DELIMITER ;
CALL WHILE_LOOP;


 Cursor in SQL â€“ What It Is and How It Works
A cursor in SQL is a database object used to retrieve, process, and manipulate rows returned by a query one row at a time.

ðŸ“Œ Why Use a Cursor?
Normally, SQL works with sets of rows (called "set-based processing"). But sometimes, you need to handle each row individually â€” thatâ€™s when a cursor is useful.

ðŸ”„ Cursor Workflow:
Declare the cursor.
Open the cursor.
Fetch each row one by one.
Process the row.
Close the cursor.
Deallocate the cursor.

set serveroutput on

declare
VNAME varchar2(20);
VSAL INT;
 BEGIN
 select  ENAME into VNAME FROM EMP WHERE DEPTNO=10 AND ROWNUM =1; -- FOR 1 RECORD DISPLAYED USED ROWNUM =1
 select SAL into VSAL FROM EMP WHERE ENAME='KING';
dbms_output.put_line('the name is: '|| VNAME);
dbms_output.put_line('salary is: '|| VSAL);
 END;
/

DECLARE
    VNAME VARCHAR2(20);
    VSAL  NUMBER;
BEGIN
    SELECT ENAME INTO VNAME FROM EMP WHERE DEPTNO = 10 AND ROWNUM = 1;
    SELECT SAL INTO VSAL FROM EMP WHERE ENAME = 'KING';

    DBMS_OUTPUT.PUT_LINE('The name is: ' || VNAME);
    DBMS_OUTPUT.PUT_LINE('Salary is: ' || VSAL);
END;
/

------------------------------
DECLARE 
CURSOR C1 IS SELECT * FROM EMP;
VREC EMP%ROWTYPE;
BEGIN
 OPEN C1;
 LOOP
 FETCH C1 INTO VREC;
 EXIT WHEN C1%NOTFOUND;
 	DBMS_OUTPUT.PUT_LINE(VREC.ENAME ||'    SALARY IS:   ' || VREC.SAL);
 END LOOP;
	DBMS_OUTPUT.PUT_LINE(' THE TOTAL ROWS: ' || C1%ROWCOUNT);
CLOSE C1;
END;
/

--------------------------------------------------- ORACALE 
CHECK THE SAL

DECLARE 
CURSOR C1 IS SELECT * FROM EMP;
VREC EMP%ROWTYPE;
BEGIN
 OPEN C1;
 LOOP
 FETCH C1 INTO VREC;
 EXIT WHEN C1%NOTFOUND;
 	IF (VREC.DEPTNO = 10) THEN 
	UPDATE EMP SET SAL = SAL*1.1 WHERE EMPNO = VREC.EMPNO;
	ELSIF (VREC.DEPTNO = 20) THEN 
	UPDATE EMP SET SAL = SAL*1.2 WHERE EMPNO = VREC.EMPNO;
 	ELSIF (VREC.DEPTNO = 30) THEN 
	UPDATE EMP SET SAL = SAL*1.3 WHERE EMPNO = VREC.EMPNO;
	END IF;
--	DBMS_OUTPUT.PUT_LINE(VREC.ENAME ||'   SALARY IS:  ' || VREC.SAL);  
 END LOOP;
--	DBMS_OUTPUT.PUT_LINE(' THE TOTAL ROWS: ' || C1%ROWCOUNT);
CLOSE C1;
END;
/


--------------------------------------------------- MYSQL
DELIMITER //

CREATE PROCEDURE update_emp_salaries()
BEGIN
    -- Declare variables
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_empno INT;
    DECLARE v_ename VARCHAR(50);
    DECLARE v_deptno INT;
    DECLARE v_sal DECIMAL(10,2);

    -- Declare the cursor
    DECLARE c1 CURSOR FOR 
        SELECT EMPNO, ENAME, DEPTNO, SAL FROM EMP;

    -- Declare handler for end of data
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Open the cursor
    OPEN c1;

    read_loop: LOOP
        FETCH c1 INTO v_empno, v_ename, v_deptno, v_sal;

        IF done THEN 
            LEAVE read_loop;
        END IF;

        -- Apply conditional logic
        IF v_deptno = 10 THEN
            UPDATE EMP SET SAL = SAL * 1.1 WHERE EMPNO = v_empno;
        ELSEIF v_deptno = 20 THEN
            UPDATE EMP SET SAL = SAL * 1.2 WHERE EMPNO = v_empno;
        ELSEIF v_deptno = 30 THEN
            UPDATE EMP SET SAL = SAL * 1.3 WHERE EMPNO = v_empno;
        END IF;

        -- Optional: You can select values here for testing (only in development)
        -- SELECT CONCAT(v_ename, ' new salary: ', v_sal);

    END LOOP;

    CLOSE c1;
END;
//

DELIMITER ;

------------------------------------------------------------------ EXCEPTION ========================== NO_DATA_FOUND PREDEFINE 
DECLARE 
  VSAL INT;
BEGIN
  SELECT SAL INTO VSAL 
  FROM EMP 
  WHERE ENAME = 'SMITH';
  
  DBMS_OUTPUT.PUT_LINE('Salary is: ' || VSAL);

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('THE RECORD NOT FOUND FOR THIS GIVEN NAME.');
    DBMS_OUTPUT.PUT_LINE('PLEASE PROVIDE A VALID NAME.');
END;
/

------------------------------------------------------------------ EXCEPTION ========================== TOO_MANY_ROWS PREDEFINE 
DECLARE 
  VSAL INT;
BEGIN
  SELECT SAL INTO VSAL 
  FROM EMP 
  WHERE DEPTNO = 10;
  
  DBMS_OUTPUT.PUT_LINE('Salary is: ' || VSAL);
EXCEPTION
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('MULTIPLE RECORDS ARE PRESENT.');  
END;
/


------------------------------------------------------------------ EXCEPTION ========================== ZERO_DIVIDE PREDEFINE 
DECLARE 
  num int;
  result int;
BEGIN
  NUM:=100;
  RESULT := NUM/0;
  DBMS_OUTPUT.PUT_LINE('RESULT IS: ' || RESULT);
EXCEPTION
  WHEN ZERO_DIVIDE THEN
    DBMS_OUTPUT.PUT_LINE('CANNOT DIVIDE BY ZERO.');  
END;
/



------------------------------------------------------------------ EXCEPTION ========================== VALUE_ERROR PREDEFINE 
------------------------------------------------------------------ EXCEPTION ========================== when others then ------------<> all exception solved

DECLARE 
  num NUMBER(3);
BEGIN
  NUM:=12345;
  DBMS_OUTPUT.PUT_LINE('RESULT IS: ' || NUM);
EXCEPTION
  WHEN VALUE_ERROR THEN
    DBMS_OUTPUT.PUT_LINE('GIVEN SIZE AND VALUE SIZE IS NOT MATCHED.');  
END;
/


-----------------------------------

DECLARE 
  VSAL INT;
BEGIN
  SELECT SAL INTO VSAL 
  FROM EMP 
  WHERE ENAME = 'SMITH';
  
  DBMS_OUTPUT.PUT_LINE('Salary is: ' || VSAL);

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('THE RECORD NOT FOUND FOR THIS GIVEN NAME.');
    DBMS_OUTPUT.PUT_LINE('PLEASE PROVIDE A VALID NAME.');
  when others then 
    DBMS_OUTPUT.PUT_LINE('Error .');

END;
/



====================================================================================================================================================================================================

Exception	Raised when ...
ACCESS_INTO_NULL	A program attempts to assign values to the attributes of an uninitialized object.
CASE_NOT_FOUND	None of the choices in the WHEN clauses of a CASE statement is selected, and there is no ELSE clause.
COLLECTION_IS_NULL	A program attempts to apply collection methods other than EXISTS to an uninitialized nested table or varray, or the program attempts to assign values to the elements of an uninitialized nested table or varray.
CURSOR_ALREADY_OPEN	A program attempts to open an already open cursor. A cursor must be closed before it can be reopened. A cursor FOR loop automatically opens the cursor to which it refers, so your program cannot open that cursor inside the loop.
DUP_VAL_ON_INDEX	A program attempts to store duplicate values in a database column that is constrained by a unique index.
INVALID_CURSOR	A program attempts a cursor operation that is not allowed, such as closing an unopened cursor.
INVALID_NUMBER	In a SQL statement, the conversion of a character string into a number fails because the string does not represent a valid number. (In procedural statements, VALUE_ERROR is raised.) This exception is also raised when the LIMIT-clause expression in a bulk FETCH statement does not evaluate to a positive number.
LOGIN_DENIED	A program attempts to log on to Oracle with an invalid username or password.
NO_DATA_FOUND	A SELECT INTO statement returns no rows, or your program references a deleted element in a nested table or an uninitialized element in an index-by table.
Because this exception is used internally by some SQL functions to signal that they are finished, you should not rely on this exception being propagated if you raise it within a function that is called as part of a query.

NOT_LOGGED_ON	A program issues a database call without being connected to Oracle.
PROGRAM_ERROR	PL/SQL has an internal problem.
ROWTYPE_MISMATCH	The host cursor variable and PL/SQL cursor variable involved in an assignment have incompatible return types. For example, when an open host cursor variable is passed to a stored subprogram, the return types of the actual and formal parameters must be compatible.
SELF_IS_NULL	A program attempts to call a MEMBER method, but the instance of the object type has not been initialized. The built-in parameter SELF points to the object, and is always the first parameter passed to a MEMBER method.
STORAGE_ERROR	PL/SQL runs out of memory or memory has been corrupted.
SUBSCRIPT_BEYOND_COUNT	A program references a nested table or varray element using an index number larger than the number of elements in the collection.
SUBSCRIPT_OUTSIDE_LIMIT	A program references a nested table or varray element using an index number (-1 for example) that is outside the legal range.
SYS_INVALID_ROWID	The conversion of a character string into a universal rowid fails because the character string does not represent a valid rowid.
TIMEOUT_ON_RESOURCE	A time-out occurs while Oracle is waiting for a resource.
TOO_MANY_ROWS	A SELECT INTO statement returns more than one row.
VALUE_ERROR	An arithmetic, conversion, truncation, or size-constraint error occurs. For example, when your program selects a column value into a character variable, if the value is longer than the declared length of the variable, PL/SQL aborts the assignment and raises VALUE_ERROR. In procedural statements, VALUE_ERROR is raised if the conversion of a character string into a number fails. (In SQL statements, INVALID_NUMBER is raised.)
ZERO_DIVIDE	A program attempts to divide a number by zero.

====================================================================================================================================================================================================

store THE SAL FOR SMITH IN VAR, IF SAL <2000 RAISE AND EXCEPTION "LOWSAL" AND DISPLAY PROPER ERROR MSG


DECLARE 
VSAL INT;
LOWSAL EXCEPTION; --1
BEGIN 
	SELECT SAL INTO VSAL FROM EMP WHERE  ENAME ='SMITH';
 	IF(VSAL<2000) THEN --2
	  RAISE LOWSAL; --3
	END IF;
	EXCEPTION 
  	 WHEN LOWSAL THEN --4
	DBMS_OUTPUT.PUT_LINE('THE SALARY IS VERY LOWWWWWW');
END;
/

----------------
	
DECLARE 
VSAL INT;
HIGHSAL EXCEPTION; --1
BEGIN 
	SELECT SAL INTO VSAL FROM EMP WHERE  ENAME ='KING';
 	IF(VSAL>3000) THEN --2
	  RAISE HIGHSAL; --3
	END IF;
	EXCEPTION 
  	 WHEN HIGHSAL THEN --4
	DBMS_OUTPUT.PUT_LINE('THE SALARY IS GREATER THAN 3000');
END;
/



--------------------------

DECLARE 
VSAL INT;
LOWSAL EXCEPTION; --1
HIGHSAL EXCEPTION;
BEGIN 
	SELECT SAL INTO VSAL FROM EMP WHERE  ENAME ='KING';
 	IF(VSAL<2000) THEN --2
	  RAISE LOWSAL; --3
	ELSIF(VSAL>3000) THEN
	  RAISE HIGHSAL;
	END IF;
	EXCEPTION 
  	 WHEN LOWSAL THEN --4
	DBMS_OUTPUT.PUT_LINE('THE SALARY IS VERY LOWWWWWW');
	 WHEN HIGHSAL THEN --4
	DBMS_OUTPUT.PUT_LINE('THE SALARY IS GREATER THAN 3000');
	
END;
/


-----------------------------------------------------------------------------------

DELIMITER --
CREATE PROCEDURE TOTAL_SUM(in NUM INT)
BEGIN
	set @COUNT = 0;
	SET @COUNTER = 0;
	MYlOOP : LOOP
	SET @COUNTER := @COUNTER + 1;
	SET @COUNT := @COUNT + @COUNTER;
	 IF @COUNTER>NUM THEN 
	LEAVE MYLOOP;
	 END IF;
	END LOOP;
SELECT @COUNT;
END;--

DELIMITER ;
CALL TOTAL_SUM(20);


------------------------

DELIMITER --
CREATE PROCEDURE mult_SUM()
BEGIN
	SET @COUNTER = 1;
	MYlOOP : LOOP
	SELECT @COUNTER * 5;
	SET @COUNTER := @COUNTER + 1;
	 IF @COUNTER>10 THEN 
	LEAVE MYLOOP;
		END IF;
	END LOOP;
END;--

DELIMITER ;
CALL mult_SUM();

----------------------------------



DELIMITER --
CREATE PROCEDURE even_SUM()
BEGIN
	declare evenno int default 0;
	while evenno<=20 
	do
	set evenno= evenno+2;
	 select evenno;
	end while;
END;--

DELIMITER ;
CALL even_SUM();

----------------------------------

DELIMITER --
CREATE PROCEDURE odd_SUM()
BEGIN
	declare evenno int default 1;
	while evenno<=20 
	do
	set evenno= evenno+2;
	 select evenno;
	end while;
END;--

DELIMITER ;
CALL odd_SUM();
-----------------------------------


